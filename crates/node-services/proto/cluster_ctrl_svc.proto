// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

package dev.restate.cluster_ctrl;

service ClusterCtrlSvc {
  rpc GetClusterState(ClusterStateRequest) returns (ClusterStateResponse);

  rpc TrimLog(TrimLogRequest) returns (google.protobuf.Empty);
}

message ClusterStateRequest {}

message ClusterStateResponse {
  google.protobuf.Duration last_refreshed = 1;
  dev.restate.common.Version nodes_config_version = 2;
  map<uint32, NodeState> nodes = 3;
}

message NodeState {
  oneof state {
    AliveNode alive = 1;
    DeadNode dead = 2;
  }
}

message AliveNode {
  dev.restate.common.NodeId generational_node_id = 1;
  google.protobuf.Timestamp last_heartbeat_at = 2;
  map<uint64, PartitionProcessorStatus> partitions = 3;
}

message DeadNode { google.protobuf.Timestamp last_seen_alive = 1; }

enum RunMode {
  RunMode_UNKNOWN = 0;
  LEADER = 1;
  FOLLOWER = 2;
}

enum ReplayStatus {
  ReplayStatus_UNKNOWN = 0;
  STARTING = 1;
  ACTIVE = 2;
  CATCHING_UP = 3;
}

message PartitionProcessorStatus {
  google.protobuf.Timestamp updated_at = 1;
  RunMode planned_mode = 2;
  optional RunMode effective_mode = 3;
  optional dev.restate.common.LeaderEpoch last_observed_leader_epoch = 4;
  optional dev.restate.common.NodeId last_observed_leader_node = 5;
  optional dev.restate.common.Lsn last_applied_log_lsn = 6;
  optional google.protobuf.Timestamp last_record_applied_at = 7;
  uint64 num_skipped_records = 8;
  ReplayStatus replay_status = 9;
  optional dev.restate.common.Lsn last_persisted_log_lsn = 10;
  // Set if replay_status is CATCHING_UP
  optional dev.restate.common.Lsn target_tail_lsn = 11;
}

message TrimLogRequest {
  uint64 log_id = 1;
  uint64 trim_point = 2;
}
