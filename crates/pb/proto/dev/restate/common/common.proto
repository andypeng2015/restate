// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

package dev.restate.common;

enum ProtocolVersion {
  UNKNOWN = 0;
  BASIC_HANDSHAKE = 1;
  MAX_PROTOCOL_VERSION = 2;
}

message NodeId {
  uint32 id = 1;
  optional uint32 generation = 2;
}

// A generic type for versioned metadata
message Version {
  uint32 value = 1;
}

// For Streaming Communication
message MessageHeader {
  // Identifier for this message. This is generated by the sender to match
  // responses coming through other channels. If the message is a response,
  // the sender will set this to the same value as the message it is responding
  // to.
  uint32 message_id = 1;
  Version my_nodes_config_version = 2;
  Version schema_version = 3;
}

// First message sent to an ingress after starting the session. The message must
// be sent before any other message.
message Hello {
  dev.restate.common.ProtocolVersion min_protocol_version = 1;
  dev.restate.common.ProtocolVersion max_protocol_version = 2;
  // generational node id of sender
  dev.restate.common.NodeId my_node_id = 3;
}

message Welcome {
  dev.restate.common.ProtocolVersion protocol_version = 1;
  // generational node id of sender
  dev.restate.common.NodeId my_node_id = 2;
}
