name: CI

on:
  pull_request:
  workflow_call:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  rustfmt:
    name: RustFmt Check
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
          rustflags: ""

      - name: Check license headers
        run: ./tools/scripts/check-license-headers

      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/clean-runner

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
          rustflags: ""

      - name: Setup just
        uses: extractions/setup-just@v2

      - name: Install protoc
        uses: ./.github/actions/install-protoc

      - name: Clippy Check
        run: just clippy

  build-and-test:
    name: Build and test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: clippy
    permissions:
      contents: read
      packages: read
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-22.04, macos-latest] # 1 macos-latest minute counts as 10 minutes --> quite expensive :-(
        os: [ubuntu-22.04]
    env:
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/clean-runner

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ""

      - name: Install protoc
        uses: ./.github/actions/install-protoc

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Setup just
        uses: extractions/setup-just@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: just test --profile=ci

      - name: Test Reporter
        uses: dorny/test-reporter@v1.9.0
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Test Results                   # Name of the check run which will be created
          path: target/nextest/ci/junit.xml    # Path to test results
          reporter: java-junit                 # Nextest generates JUnit XML

  docker:
    name: Create docker image
    needs: clippy
    uses: ./.github/workflows/docker.yml
    with:
      uploadImageAsTarball: true
      platforms: linux/amd64

  e2e:
    name: Run e2e tests
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
      actions: read
    secrets: inherit
    needs: docker
    uses: restatedev/e2e/.github/workflows/e2e.yaml@main
    with:
      restateCommit: ${{ github.event.pull_request.head.sha || github.sha }}
      e2eRef: main
